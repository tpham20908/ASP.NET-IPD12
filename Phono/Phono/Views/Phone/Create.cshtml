@model Phono.Models.CreatePhoneVM

@{
    if (Model.Phone.Id == 0)
    {
        ViewBag.Title = "Create";
    }
    else
    {
        ViewBag.Title = "Edit";
    }
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm("Save", "Phone"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Phone</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.Phone.Id)
        <div class="form-group">
            @Html.LabelFor(m => m.Phone.PhoneName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Phone.PhoneName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Phone.PhoneName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Phone.DateReleased, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Phone.DateReleased, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @Html.ValidationMessageFor(m => m.Phone.DateReleased, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Phone.ScreenSize, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Phone.ScreenSize, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Phone.ScreenSize, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Phone.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Phone.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Phone.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Phone.BrandId, "Brand", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
               m => m.Phone.BrandId,
               new SelectList(Model.Brands, "Id", "BrandName"),
               "Select a brand",
               new { @class="form-control"}
               )
                @Html.ValidationMessageFor(m => m.Phone.BrandId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Phone.PhoneTypeId, "Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
               m => m.Phone.PhoneTypeId,
               new SelectList(Model.PhoneTypes, "Id", "FullType"),
               "Select a type",
               new { @class="form-control"}
               )
                @Html.ValidationMessageFor(m => m.Phone.PhoneTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
